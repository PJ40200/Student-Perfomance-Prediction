# -*- coding: utf-8 -*-
"""Grade prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j0K-SY60d8jrqGFajIYswtQpNCSxao-W

#Applying decision tress, random forest, SVM (k-fold validation and feature selection) on students_performance_data
"""

import pandas as pd
import numpy as np
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler

data = pd.read_csv("/content/Student_performance_data _.csv")

data.head(10)

data.isna().sum()

data = data.drop(['StudentID','GPA'],axis=1)

ss = StandardScaler()
ss.fit(data)

data

y= data['GradeClass']
X = data.drop(['GradeClass'],axis=1)

X_train,X_test, y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=5)

"""#Applying Decision Tree"""

clf = tree.DecisionTreeClassifier(random_state=4,class_weight='balanced')
clf.fit(X_train,y_train)

accuracy_score(y_test, clf.predict(X_test))

"""# Applying random forest classifier"""

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(random_state=0)
rfc.fit(X_train,y_train)

accuracy_score(y_test, rfc.predict(X_test))

global_importances = pd.Series(rfc.feature_importances_, index=X_train.columns)
global_importances.sort_values(ascending=True, inplace=True)
global_importances.plot.barh(color='pink')
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.title("Global Feature Importance - Built-in Method")

"""# Applying SVM classifier"""

from sklearn import svm

svmclf = svm.SVC(random_state=0)
svmclf.fit(X_train,y_train)
accuracy_score(y_test, svmclf.predict(X_test))

"""Combining svm and random forest"""

y_pred = (svmclf.predict(X_test) + rfc.predict(X_test) )//2

y_pred

accuracy_score(y_test,y_pred)

"""# k-fold validation"""

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

cv = KFold(n_splits=10, random_state=1, shuffle=True)

# svm classifier
scores = cross_val_score(svmclf, X, y, scoring='accuracy',
                         cv=cv, n_jobs=-1)

scores

np.mean(scores)

#random forest classifier
scores2 = cross_val_score(rfc, X, y, scoring='accuracy',
                         cv=cv, n_jobs=-1)
scores2

np.mean(scores2)

"""# feature selection"""

from mlxtend.feature_selection import SequentialFeatureSelector

sfs = SequentialFeatureSelector(rfc,k_features='best',forward=False, n_jobs=-1)
sfs.fit(X_train,y_train)

features = list(sfs.k_feature_names_)


rfc.fit(X_train[features],y_train)
y_pred = rfc.predict(X_test[features])

y_pred.shape

y_test.shape

accuracy_score(y_test,y_pred)

global_importances = pd.Series(rfc.feature_importances_, index=X_train[features].columns)
global_importances.sort_values(ascending=True, inplace=True)
global_importances.plot.barh(color='pink')
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.title("Global Feature Importance - Built-in Method")